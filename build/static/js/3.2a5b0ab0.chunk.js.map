{"version":3,"sources":["components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/quotes/HighlightedQuote.module.css","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/NewCommentForm.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","components/pages/QuoteDetail.js"],"names":["module","exports","CommentItem","props","className","classes","item","text","CommentsList","comments","map","comment","id","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","rows","ref","actions","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","params","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,4B,mBCAzBD,EAAOC,QAAU,CAAC,SAAW,iC,mBCA7BD,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,kC,mBCApJD,EAAOC,QAAU,CAAC,MAAQ,kC,wHCSXC,EARK,SAACC,GACnB,OACE,oBAAIC,UAAWC,IAAQC,KAAvB,SACE,4BAAIH,EAAMI,U,iBCQDC,EAVM,SAACL,GACpB,OACE,oBAAIC,UAAWC,IAAQI,SAAvB,SACGN,EAAMM,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAA8BJ,KAAMI,EAAQJ,MAA1BI,EAAQC,U,kCCwCnBC,EAzCQ,SAACV,GACtB,IAAMW,EAAiBC,mBAEvB,EAAuCC,YAAQC,KAAvCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,MAErBC,EAAiBlB,EAAjBkB,aAERC,qBAAU,WACO,cAAXH,GAA2BC,GAC7BC,MAED,CAACF,EAAQC,EAAOC,IAEnB,IAAME,EAAoB,SAACC,GACzBA,EAAMC,iBAEN,IAAMC,EAAcZ,EAAea,QAAQC,MAG3CV,EAAY,CAAEW,YAAa,CAAEtB,KAAMmB,GAAeI,QAAS3B,EAAM2B,WAInE,OACE,uBAAM1B,UAAWC,IAAQ0B,KAAMC,SAAUT,EAAzC,UACc,YAAXJ,GACC,qBAAKf,UAAU,WAAf,SACE,cAAC6B,EAAA,EAAD,MAGJ,sBAAK7B,UAAWC,IAAQ6B,QAASF,SAAUT,EAA3C,UACE,uBAAOY,QAAQ,UAAf,0BACA,0BAAUvB,GAAG,UAAUwB,KAAK,IAAIC,IAAKvB,OAEvC,qBAAKV,UAAWC,IAAQiC,QAAxB,SACE,wBAAQlC,UAAU,MAAlB,+BCoCOmC,EAlEE,WACf,MAA8CC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAGQZ,EADOa,cACPb,QAER,EAKId,YAAQ4B,KAAgB,GAJ1B1B,EADF,EACEA,YACAC,EAFF,EAEEA,OACM0B,EAHR,EAGEC,KACA1B,EAJF,EAIEA,MAGFE,qBAAU,WACRJ,EAAYY,KACX,CAACA,EAASZ,IAEb,IAQIT,EAJEsC,EAAsBC,uBAAY,WACtC9B,EAAYY,KACX,CAACZ,EAAaY,IA2BjB,MAvBe,YAAXX,IACFV,EACE,qBAAKL,UAAU,WAAf,SACE,cAAC6B,EAAA,EAAD,OAKS,cAAXd,GAA0B0B,GAAkBA,EAAeI,OAAS,IACtExC,EAAW,cAAC,EAAD,CAAcA,SAAUoC,KAIxB,cAAX1B,GACE0B,GAA4C,IAA1BA,EAAeI,SAEnCxC,EAAW,mBAAGL,UAAU,WAAb,yCAGTgB,IACFX,EAAW,oBAAGL,UAAU,mBAAb,UAAiCgB,EAAjC,QAIX,0BAAShB,UAAWC,IAAQI,SAA5B,UACE,gDACEgC,GACA,wBAAQrC,UAAU,MAAM8C,QArCC,WAC7BR,GAAmB,IAoCf,2BAIDD,GACC,cAAC,EAAD,CAAgBX,QAASA,EAAST,aAAc0B,IAEjDtC,M,iBC7DQ0C,EATU,SAAChD,GACxB,OACE,yBAAQC,UAAWC,IAAQ+C,MAA3B,UACE,4BAAIjD,EAAMI,OACV,qCAAaJ,EAAMkD,aCqDVC,UAnDK,WAClB,IAAMC,EAASZ,cACTa,EAAQC,cAEN3B,EAAYyB,EAAZzB,QAER,EAKId,YAAQ0C,KAAgB,GAJ1BxC,EADF,EACEA,YACAC,EAFF,EAEEA,OACMwC,EAHR,EAGEb,KACA1B,EAJF,EAIEA,MASF,OANAE,qBAAU,WACRJ,EAAYY,KACX,CAACZ,EAAaY,IAIF,YAAXX,EAEA,qBAAKf,UAAU,WAAf,SACE,cAAC6B,EAAA,EAAD,MAIFb,EACK,oBAAGhB,UAAU,mBAAb,UAAiCgB,EAAjC,OAGJuC,EAAYpD,KAKf,eAAC,WAAD,WACE,cAAC,EAAD,CAAkBA,KAAMoD,EAAYpD,KAAM8C,OAAQM,EAAYN,SAC9D,cAAC,IAAD,CAAOO,KAAI,UAAKJ,EAAMI,MAAQC,OAAK,EAAnC,SACE,qBAAKzD,UAAU,WAAf,SACE,cAAC,IAAD,CAAMA,UAAU,YAAY0D,GAAE,UAAKN,EAAMO,IAAX,aAA9B,+BAKJ,cAAC,IAAD,CAAOH,KAAI,UAAKJ,EAAMI,KAAX,aAAX,SACE,cAAC,EAAD,SAdG","file":"static/js/3.2a5b0ab0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__-ckzJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__zXSKs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__2j8TO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2nBRZ\",\"loading\":\"NewCommentForm_loading__3xFNu\",\"control\":\"NewCommentForm_control__qHJQH\",\"actions\":\"NewCommentForm_actions__2xDxu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__149By\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useEffect, useRef } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport classes from \"./NewCommentForm.module.css\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddComment } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddComment();\n    }\n  }, [status, error, onAddComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    // optional: Could validate here\n    sendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId });\n    // send comment to server\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"../comments/CommentsList\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  const params = useParams();\n  const { quoteId } = params;\n\n  const {\n    sendRequest,\n    status,\n    data: loadedComments,\n    error,\n  } = useHttp(getAllComments, true);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No comments were added yet</p>;\n  }\n\n  if (error) {\n    comments = <p className=\"centered focused\">{error} </p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm quoteId={quoteId} onAddComment={addedCommentHandler} />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Fragment, useEffect } from \"react\";\r\nimport { Link, Route, useParams, useRouteMatch } from \"react-router-dom\";\r\nimport Comments from \"../comments/Comments\";\r\nimport HighlightedQuote from \"../quotes/HighlightedQuote\";\r\nimport useHttp from \"../../hooks/use-http\";\r\nimport { getSingleQuote } from \"../../lib/api\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\n\r\nconst QuoteDetail = () => {\r\n  const params = useParams();\r\n  const match = useRouteMatch();\r\n\r\n  const { quoteId } = params;\r\n\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuote,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  //const quote =\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n  if (error) {\r\n    return <p className=\"centered focused\">{error} </p>;\r\n  }\r\n\r\n  if (!loadedQuote.text) {\r\n    return <p>No quote found</p>;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Route path={`${match.path}`} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            Load comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments></Comments>\r\n      </Route>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}